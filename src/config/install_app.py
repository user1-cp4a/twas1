# Generated by IBM TransformationAdvisor
# Fri Nov 27 19:14:01 UTC 2020

import sys
import os

global  AdminConfig

def getNodeId (prompt):
    nodeList = AdminConfig.list("Node").split("\n")

    if (len(nodeList) == 1):
        node = nodeList[0]
    else:
        print ""
        print "Available Nodes:"

        nodeNameList = []

        for item in nodeList:
            item = item.rstrip()
            name = getName(item) 

            nodeNameList.append(name)
            print "   " + name

        DefaultNode = nodeNameList[0]
        if (prompt == ""):
            prompt = "Select the desired node"

        nodeName = getValidInput(prompt+" ["+DefaultNode+"]:", DefaultNode, nodeNameList )

        index = nodeNameList.index(nodeName)
        node = nodeList[index]

    return node


def getServerId (prompt):
    serverList = AdminConfig.list("Server").split("\n")

    if (len(serverList) == 1):
        server = serverList[0]
    else:
        print ""
        print "Available Servers:"

        serverNameList = []

        for item in serverList:
            item = item.rstrip()
            name = getName(item)

            serverNameList.append(name)
            print "   " + name

        DefaultServer = serverNameList[0]
        if (prompt == ""):
            prompt = "Select the desired server"
        serverName = getValidInput(prompt+" ["+DefaultServer+"]:", DefaultServer, serverNameList )

        index = serverNameList.index(serverName)
        server = serverList[index]

    return server


def getName (objectId):
    endIndex = (objectId.find("(c") - 1)
    stIndex = 0
    if (objectId.find("\"") == 0):
        stIndex = 1
    return objectId[stIndex:endIndex+1]

print "Creating datasource ..."
user=sys.argv[0]                  
print "User : "+user
password=sys.argv[1]                                   
print "Password : "+password
url=sys.argv[2]
print "Url : "+url

cellName=AdminConfig.showAttribute(AdminConfig.list("Cell"),'name')
print "cellName :"+cellName
node=AdminConfig.showAttribute(AdminConfig.list('Node'),'name')
print "node :"+node
server=AdminConfig.showAttribute(AdminConfig.list('Server'),'name')
print "server :"+server

jdbcdriver=AdminTask.createJDBCProvider('[-scope Node='+node+',Server='+server+' -databaseType Oracle -providerType "Oracle JDBC Driver" -implementationType "Connection pool data source" -name "Oracle JDBC Driver" -description "Oracle JDBC Driver" -classpath [/work/config/lib/ojdbc8.jar ] -nativePath "" ]') 
print "jdbcdriver : "+jdbcdriver
 
auth=AdminTask.createAuthDataEntry('[-alias "oracle" -user '+user+' -password '+password+' ]')
print "auth : "+auth

alias=AdminConfig.showAttribute(auth,"alias")
print "alias : "+alias

datasource=AdminTask.createDatasource(jdbcdriver, '[-name "Oracle DataSource" -jndiName "jdbc/oracle" -dataStoreHelperClassName com.ibm.websphere.rsadapter.Oracle11gDataStoreHelper -containerManagedPersistence true -componentManagedAuthenticationAlias '+alias+' -configureResourceProperties [[URL java.lang.String '+url+']]]') 
print "datasource : "+datasource

mappingModule=AdminConfig.create('MappingModule', datasource, '[[authDataAlias '+alias+'] [mappingConfigAlias DefaultPrincipalMapping]]')
print "mappingModule : "+mappingModule

print "Add virtual host for node port admin console"
AdminConfig.create('HostAlias', AdminConfig.getid('/Cell:DefaultCell01/VirtualHost:admin_host/'), '[[hostname "*"] [port '+sys.argv[3]+']]') 

print "Installing application ..."

node = getName(getNodeId(""))
server = getName(getServerId(""))

parms = "-appname modresorts"
parms += " -node " + node + " -server " + server
parms += " -nouseMetaDataFromBinary"
parms += " -MapWebModToVH [[.* .* default_host]]"
app = AdminApp.install("/work/config/modresorts-2.0.war", [parms])

AdminConfig.save()

